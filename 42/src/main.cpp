#include <vector>
#include <cassert>

/*
The problem:

Given a list of targets arranged in a line, 
determine whether a ball bounce can reach a final target.
The ball can only bounce off the targets, and if it reaches
a target with a horizontal speed of 'i', it will bounce 
off with horizontal speed 'i-1', 'i' or 'i+1.
The ball will never completely loose forward horizontal speed
(or bounce back).

The initial throw has horizontal speed of '1'.

Reachable example:
[0,1,3,4,6,9,13]

Unreachable example:
[0,1,3,7,10,14] (the jump from 3->7 is to high)
*/
bool canReach(const std::vector<int>& targets) {
    int* speed{new int{1}};

    int last{-1};

    for(int target : targets){
        if(last == -1){
            last = target;
            continue;
        }
        int delta = target - last;
        last = std::move(target);
        switch (delta - *speed){
        case -1:
            *speed -= 1;
            break;
        case 0:
            break;
        case 1:
            *speed += 1;
            break;
        default:
            return false;
        }
    }
    delete speed;
    return true;
}

int main() {
    // Example inputs:
    assert(canReach({0,1,3,4,6,9,13}));
    assert(!canReach({0,1,3,7,10,14}));

    // More test cases:
    assert(canReach({0,1,3,4,6,7,8,10,11,12,13,15,18,22,26,31,37,42,46,51,55,58,61,64,67,69,71,73,76,78,81,84,87,90,94,99,103,107,110,114,117,119,121,122,123,125,127,130,132,135,139,142,144,145,147,148,149,150,151,152,153,154,155,156,157,158,160,163,167,171,176,182,188,194,199,205,212,220,228,237,247,258,270,283,296,308,321,335,350,364,379,393,406,418,430,443,455,468,480,491,503,515}));
    assert(canReach({0,1,3,5,7,9,10,11,13,14,15,17,20,23,27,32,37,42,46,50,55,60,65,69,73,76,78,79,81,82,83,85,87,89,90,91,93,94,95,96,98,99,101,104,107,110,113,117,122,128,133,137,141,144,147,149,150,151,152,154,157,159,161,164,167,169,172,175,177,178,180,181,182,183,184,185,187,189,191,194,197,200,203,206,209,211,212,214,216,217,218,219,220,221,223,224,226,228,229,230,232,235,237,240,244,248,251,255,260,266,272,277,283,290,298,306,313,319,325,330,334,337,340,343,345,347,348,349,350,351,352,353,355,358,361,363,365,368,372,377,383,390,396,401,405,409,414,420,425,430,435,439,442,444,447,451,455,460,466,473,479,484,489,493,497,501,504,508,512,516,521,526,532,537,543,550,557,563,568,574,580,586,592,599,606,612,618,624,629,634,639,643,648,652,657,663,669,674,680,685,690,695}));
    assert(canReach({0,1,3,4,5,6,7,9,12,14,16,18,20,22,25,28,31,34,36,38,41,43,46,49,51,54,57,60,62,63,65,67,68,70,73,75,77,79,82,85,88,92,95,99,104,110,117,124,130,136,141,145,148,152,156,160,164,167,170,174,178,183,187,191,195,198,201,205,209,212,214,217,219,220,222,223,225,228,231,235,238,241,245,249,253,256,260,263,266,268,269,270,271,272,273,274,276,279,282,284,286,288,289,291,293,294,296,297,298,300,303,307,311,314,317,319,321,324,328,331,334,338,343,347,352,357,363,368,374,380,386,393,401,409,416,424,433,442,450,458,466,474,481,487,493,499,506,512,519,526,534,542,550,558,567,576,585,593,602,610,618,625,631,637,643,648,653,658,662,667,673,678,683,687,692,698,705,712,718,725,732,740,749,758,768,778,787,796,804,811,819,828,838,847,855,864,872,880,889,898,907,917,928,938,947,957,966,976,986,997,1009,1022,1036,1049,1063,1077,1091,1106,1122,1139,1157,1176,1195,1215,1234,1254,1275,1296,1316,1337,1358,1380,1403,1427,1451,1475,1500,1524,1549,1573,1598,1622,1646,1670,1695,1720,1746,1773,1801,1829,1858,1888,1918,1948,1977,2006,2035,2065,2096,2128,2160,2192,2224,2256,2287,2319,2351,2383,2415,2448,2480,2512,2545,2579,2612,2645,2678,2712,2746,2779,2812,2846,2879,2911,2944,2976,3009,3041,3073,3105,3137,3168,3198,3228,3258,3289,3319,3349,3380,3410,3440,3469}));
    assert(canReach({0,1,2,4,7,11,15,19,22,24,27,31,35,39,42,46,51,56,62,68,74,80,85,89,94,98,102,106,111,116,120,125,129,132,135,139,142,146,149,151,153,156,160,165,171,178,184,189,194,200,205,211,218,224,231,239,248,258,267,277,287,297,306,315,325,336,347,357,368,378,388,398,408,419,431,444,456,467,478,488,497,505,514,523,533,543,553,564,576,587,599,611,623,635,647,659,670,681,692,703,715,726,736,747,758,770,783,797,810,823,835,846,857,869,881,893,905,917,930,942,953,965,976,986,997,1008,1018,1029,1041,1054,1066,1079,1091,1102,1112,1122,1133,1145,1158,1170,1182,1195,1209,1224,1238,1252,1267,1283,1300,1317,1335,1352,1368,1383,1397,1410,1423,1435,1447,1458,1470,1483,1496,1508,1520,1532,1543,1553,1562,1571,1580,1590,1601,1612,1623,1633,1644,1655,1665,1674,1683,1692,1702,1712,1722,1733,1743,1753,1762,1771,1780,1788,1795,1801,1808,1816,1825,1834,1844,1855,1865,1876,1887,1898,1910,1923,1935,1948,1961,1973,1985,1997,2008,2020,2033,2045,2058,2070,2082,2094,2107,2121,2134,2147,2160,2172,2184,2197,2211,2226,2240,2254,2269,2283,2297,2311,2326,2341,2356,2372,2387,2403,2419,2435,2452,2468,2483,2499,2516,2532,2547,2561,2575,2589,2604,2618,2632,2645,2659,2673,2687,2702,2718,2733,2749,2766,2782,2798,2815,2831,2847,2864,2881,2898,2916,2933,2950,2966,2983,3001,3020,3038,3056,3074,3093,3112,3131,3149,3167,3186,3205,3224,3243,3263,3283,3302,3321,3341,3361,3380,3398,3417,3437,3456,3475,3495,3514,3533,3553,3572,3591,3610,3630,3651,3673,3695,3717,3740,3763,3787,3811,3836,3860,3883,3907,3930,3954,3977,4001,4024,4046,4069,4092,4114,4137,4159,4181,4203,4226,4248,4270,4292,4313,4334,4355,4376,4398,4419,4439,4459,4479,4500,4522,4544,4567,4591,4615,4640,4665,4691,4717,4742,4768,4795,4821,4847,4873,4899,4924,4950,4977,5005,5034,5064,5094,5125,5155,5185,5214,5243,5271,5298,5324,5351,5377,5402,5427,5453,5479,5504,5528,5551,5574,5596,5618,5639,5660,5681,5702,5724,5747,5769}));

    assert(!canReach({0,1,3,4,6,7,8,10,11,12,13,15,18,22,26,31,37,42,46,51,55,58,61,64,67,69,71,73,76,78,81,84,87,90,94,99,103,107,110,114,117,119,121,122,123,125,127,130,132,135,139,142,144,145,147,148,149,150,151,152,153,154,155,156,157,158,160,163,167,171,176,182,188,194,199,205,212,220,228,237,247,258,270,283,296,308,321,335,350,364,379,405,406,418,430,443,455,468,480,491,503,515}));
    assert(!canReach({0,1,3,5,7,9,10,11,13,14,15,17,20,23,27,32,37,42,46,50,55,60,65,69,73,76,78,79,81,82,83,85,87,89,90,91,93,94,95,96,98,99,101,104,107,110,113,117,122,128,133,137,141,144,147,149,150,151,152,154,157,159,161,164,167,169,172,175,177,178,180,181,182,183,184,185,187,189,191,194,197,200,203,206,209,211,212,214,216,217,218,219,220,221,223,224,226,228,229,230,232,235,237,240,244,248,251,255,260,266,272,277,283,290,298,306,313,319,325,330,334,337,340,343,345,347,348,349,350,351,352,353,355,358,361,363,365,368,372,377,383,390,396,401,405,409,414,420,425,430,435,439,442,444,447,451,455,460,466,473,479,484,489,493,497,501,504,508,512,516,521,526,532,537,543,550,557,563,568,574,580,586,592,599,606,612,618,628,629,634,639,643,648,652,657,663,669,674,680,685,690,695}));
    assert(!canReach({0,1,3,4,5,6,7,9,12,14,16,18,20,22,25,28,31,34,36,38,41,43,46,49,51,54,57,60,62,63,65,67,68,70,73,75,77,79,82,85,88,92,95,99,104,110,117,124,130,136,141,145,148,152,156,160,164,167,170,174,178,183,187,191,195,198,201,205,209,212,214,217,219,220,222,223,225,228,231,235,238,241,245,249,253,256,260,263,266,268,269,270,271,272,273,274,277,279,282,284,286,288,289,291,293,294,296,297,298,300,303,307,311,314,317,319,321,324,328,331,334,338,343,347,352,357,363,368,374,380,386,393,401,409,416,424,433,442,450,458,466,474,481,487,493,499,506,512,519,526,534,542,550,558,567,576,585,593,602,610,618,625,631,637,643,648,653,658,662,667,673,678,683,687,692,698,705,712,718,725,732,740,749,758,768,778,787,796,804,811,819,828,838,847,855,864,872,880,889,898,907,917,928,938,947,957,966,976,986,997,1009,1022,1036,1049,1063,1077,1091,1106,1122,1139,1157,1176,1195,1215,1234,1254,1275,1296,1316,1337,1358,1380,1403,1427,1451,1475,1500,1524,1549,1573,1598,1622,1646,1670,1695,1720,1746,1773,1801,1829,1858,1888,1918,1948,1977,2006,2035,2065,2096,2128,2160,2192,2224,2256,2287,2319,2351,2383,2415,2448,2480,2512,2545,2579,2612,2645,2678,2712,2746,2779,2812,2846,2879,2911,2944,2976,3040,3041,3073,3105,3137,3168,3198,3228,3258,3289,3319,3349,3380,3410,3440,3469}));
    assert(!canReach({0,1,2,4,7,11,15,19,22,24,27,31,35,39,42,46,51,56,62,68,74,80,85,89,94,98,102,106,111,116,120,125,129,132,135,139,142,146,149,151,153,156,160,165,171,178,184,189,194,200,205,211,218,224,231,239,248,258,267,277,287,297,306,315,325,336,347,357,368,378,388,398,408,419,431,444,456,467,478,488,497,505,514,523,533,543,553,564,576,587,599,611,623,635,647,659,670,681,692,703,715,726,736,747,758,770,783,797,810,823,835,846,857,869,881,893,905,917,930,942,953,965,976,986,997,1008,1018,1029,1041,1054,1066,1079,1091,1102,1112,1122,1133,1145,1158,1170,1182,1195,1209,1224,1238,1252,1267,1283,1300,1317,1335,1352,1368,1383,1397,1410,1423,1435,1447,1458,1470,1483,1496,1508,1520,1532,1543,1553,1562,1571,1580,1590,1601,1612,1623,1633,1644,1655,1665,1674,1683,1692,1702,1712,1722,1733,1743,1753,1762,1771,1780,1788,1795,1801,1808,1816,1825,1834,1844,1855,1865,1876,1887,1898,1910,1923,1935,1948,1961,1973,1985,1997,2008,2020,2033,2045,2058,2070,2082,2094,2107,2121,2134,2147,2160,2172,2184,2197,2211,2226,2240,2254,2269,2283,2297,2311,2326,2341,2356,2372,2387,2403,2419,2435,2452,2468,2483,2499,2516,2532,2547,2561,2575,2589,2604,2618,2632,2645,2659,2673,2687,2702,2718,2733,2749,2766,2782,2798,2815,2831,2847,2864,2881,2898,2916,2933,2950,2966,2983,3001,3020,3038,3056,3074,3093,3112,3131,3149,3167,3186,3205,3224,3243,3263,3283,3302,3321,3341,3361,3380,3398,3417,3437,3456,3475,3495,3514,3533,3553,3572,3591,3610,3630,3651,3673,3695,3717,3740,3763,3787,3811,3836,3860,3883,3907,3930,3954,3977,4001,4024,4046,4069,4092,4114,4137,4159,4181,4203,4226,4248,4270,4292,4313,4334,4355,4376,4398,4419,4439,4459,4479,4500,4522,4544,4567,4591,4615,4640,4665,4691,4717,4742,4768,4795,4821,4847,4873,4899,4924,4950,4977,5005,5034,5064,5094,5125,5155,5185,5214,5243,5271,5298,5324,5351,5377,5402,5427,5453,5479,5504,5528,5573,5574,5596,5618,5639,5660,5681,5702,5724,5747,5769}));
}